/*
 * Copyright 2023 Arindom Ghosh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.arindom.stategenie.processors

import com.squareup.kotlinpoet.ClassName

internal data class ProgaurdConfig(
    private val targetClass: ClassName,
    private val extensiveName: String,
    private val extensiveConstructorParam: List<String>
) {
    internal val outputFile =
        "META-INF/proguard/geniestate-${targetClass.canonicalName}-$extensiveName.pro"

    internal fun writeTo(out: Appendable): Unit =
        out.run {
            appendLine(
                "# This file was generated by geneistate (https://github.com/ArindomGhosh/StateGenie). \n" +
                        "# Do not modify this file."
            )
            //
            // -if class {the target class}
            // -keepnames class {the target class}
            // -if class {the target class}
            // -keep class {the generated sealed extensive class} {
            //    <init>(...);
            // }
            //

            val targetName = targetClass.reflectionName()
            val sealedExtensiveCanonicalName =
                ClassName(targetClass.packageName, extensiveName).canonicalName
            // Keep the class or interface name for SealedX's reflective lookup based on it
            appendLine("-if interface $targetName")
            appendLine("-keepnames interface $targetName")

            appendLine("-if interface $targetName")
            appendLine("-keep interface $sealedExtensiveCanonicalName {")
            // Keep the constructor for SealedX's reflective lookup
            val constructorArgs = extensiveConstructorParam.joinToString(",")
            appendLine("    public <init>($constructorArgs);")
            appendLine("}")
        }
}